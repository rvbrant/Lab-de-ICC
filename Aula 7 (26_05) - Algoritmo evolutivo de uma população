#include <stdio.h>
#include <stdlib.h>
#include <time.h>



void Inicio_Populacao(){
 //vetor que contém os indivíduos
    int i;
    float Individuos[10];
    for(i=0;i<10;i++){
        printf("*");
    }
    printf("\nPopulacao Gerada!\n");
    srand(time(NULL));
    for(i=0; i<10; i++){
        Individuos[i]=(rand() % 11);
        printf("%f \n", Individuos[i]);
    }
    for(i=0;i<10;i++){
        printf("*");
    }
    Selecao_Natural(Individuos, 0, 1);
}


void Selecao_Natural(float Individuos[], int i, int j){
//acha o valor máximo - usar função de ordenar vetor
//indica quem irá reproduzir
  if(j==1){
    printf("\nElitismo:\n");
  }
  float aux;
  if(i==9){
    for(i=0; i<10; i++){
        printf("\n%f", Individuos[i]);
    }
    Crossover(Individuos);
  }
  else{

    if(j==10){
        Selecao_Natural(Individuos, i+1, i+2);
    }

    else{
        if(Individuos[i]>Individuos[j]){
            aux=Individuos[i];
            Individuos[i]=Individuos[j];
            Individuos[j]=aux;
        }
            Selecao_Natural(Individuos, i, j+1);
    }
  }
}


void Crossover(float Individuos[]){
    //soma os dois melhores
    //armazena um valor
    //retorna esse valor
    printf("\nCrossover com os melhores individuos:\n ");
    float Descendente;
    Descendente = (Individuos[9] + Individuos[8])/2;
    if(Descendente<=9.98){
        Descendente = Descendente + 0.02;
    }
    printf("\nO descendente gerado eh = %f", Descendente);
    Nova_Populacao(Individuos, Descendente);
}


void Nova_Populacao(float Individuos[], double Descendente){
    //substitui o último valor
    //printa algo indicando que o último foi morto
    if(Individuos[1]=10){
        printf("Final");
    }
    else{
    Individuos[0]=Descendente;
    printf("\nO individuo mais fraco foi morto e substituido por = %f", Individuos[0]);
    Selecao_Natural(Individuos, 0, 1);
    }
}



int main()
{

    float vetor[10]; //vetor precisa ser float pois, devido a função mutação alguns terão algarismos com vírgula
    Inicio_Populacao();
    return 0;
}
